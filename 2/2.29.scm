(define (make-mobile left right)
  (list left right)
  )

(define (make-branch len structure)
        (list len structure)
        )

(define (left-branch m)
  (car m)
  )

(define (right-branch m)
  (car (cdr m))
  )

(define (branch-length b)
  (car b)
  )
(define (branch-structure b)
  (car (cdr b))
  )

(define (total-weight m)
  (let ((left (branch-structure (left-branch m)))
        (right (branch-structure (right-branch m))))
    (cond ((and (not (pair? left)) (not (pair? right)))
           (+ left right))
          ((and (not (pair? left)) (pair? right))
           (+ left (total-weight right)))
          ((and (not (pair? right)) (pair? left))
           (+ right (total-weight left)))
          (else (+ (total-weight left) (total-weight right)))
          )
    )
  )
(define (balance m)
  (let ((left (branch-structure (left-branch m)))
        (right (branch-structure (right-branch m)))
        (left-b (left-branch m))
        (right-b (right-branch m))
        )
    (cond ((and (not (pair? left)) (not (pair? right)))
           (+ (* (branch-length left-b) left) (* (branch-length right-b) right)))
          ((and (not (pair? right)) (pair? left))
           (+ (* (branch-length left-b) (balance left)) (* (branch-length right-b) right)))
          ((and (not (pair? left)) (pair? right))
           (+ (* (branch-length left-b) left) (* (branch-length right-b) (balance right))))
          (else (+ (* (branch-length left-b) (balance left)) (* (branch-length right-b) (balance right)))))
          )
    )

(define (balance? m)
 (let ((left (branch-structure (left-branch m)))
        (right (branch-structure (right-branch m)))
        (left-b (left-branch m))
        (right-b (right-branch m))
        )
   (cond ((and (not (pair? left)) (not (pair? right)))
           (= (* (branch-length left-b) left) (* (branch-length right-b) right)))
          ((and (not (pair? right)) (pair? left))
           (and (balance? left) (= (* (branch-length left-b) (balance left)) (* (branch-length right-b) right))))
          ((and (not (pair? left)) (pair? right))
           (and (balance? right) (= (* (branch-length right-b) (balance right)) (* (branch-length left-b) left))))
          (else (and (balance? left) (balance? right) (= (* (branch-length left-b) (balance left)) (* (branch-length right-b) (balance right))))))
   ) 
  )
(define a (make-mobile (make-branch 1 1) (make-branch 1 1)))
(define b (make-mobile (make-branch 1 1) (make-branch 2 4)))
(define c (make-mobile (make-branch 1 a) (make-branch 1 a)))
(define d (make-mobile (make-branch 2 c) (make-branch 2 c)))
(total-weight a)
(total-weight b)
(total-weight c)
(total-weight d)
(balance d)
(balance? a)
